import uuid
import socket
import logging
from typing import Dict

logger = logging.getLogger(__name__)

class OOBInteraction:
    """
    Utility for Out-of-Band (OOB) interaction testing.

    This class generates unique subdomains and checks for DNS interactions.
    It requires a base domain that is configured to respond to DNS queries
    for any subdomain (e.g., pointing to an interact.sh server).
    """

    def __init__(self, domain: str):
        """
        Initialize the OOB interaction utility.

        Args:
            domain: The base domain for OOB interactions (e.g., 'oob.example.com').
                    This domain must be configured to handle wildcard DNS queries.
        """
        if not domain:
            raise ValueError("OOB domain cannot be empty.")
        self.domain = domain
        self.payloads: Dict[str, bool] = {}
        logger.info(f"OOBInteraction initialized with domain: {self.domain}")

    def generate_payload(self) -> str:
        """
        Generate a unique payload URL for OOB testing.

        Returns:
            A unique URL to be used as a payload.
        """
        unique_id = str(uuid.uuid4().hex[:16])  # Shorter UUID for convenience
        payload = f"{unique_id}.{self.domain}"
        self.payloads[payload] = False  # Store payload, initially no interaction
        logger.debug(f"Generated OOB payload: {payload}")
        return payload

    def check_interaction(self, payload: str) -> bool:
        """
        Check if a DNS interaction has occurred for the given payload.

        This method attempts a DNS lookup for the payload. If the lookup
        is successful, it indicates that an interaction has occurred.

        Args:
            payload: The OOB payload to check.

        Returns:
            True if a DNS interaction was detected, False otherwise.
        """
        if payload not in self.payloads:
            logger.warning(f"Payload {payload} was not generated by this instance.")
            return False

        try:
            # Perform a DNS lookup for the payload.
            # The OOB server should be configured to respond to any subdomain.
            addr = socket.gethostbyname(payload)
            self.payloads[payload] = True  # Mark as interacted
            logger.info(f"OOB interaction detected for payload: {payload} -> {addr}")
            return True
        except socket.gaierror:
            # getaddrinfo error: name or service not known
            # This is the expected result if no interaction has occurred.
            logger.debug(f"No OOB interaction detected for payload: {payload}")
            return False
        except Exception as e:
            logger.error(f"An unexpected error occurred while checking OOB interaction for {payload}: {str(e)}")
            return False
